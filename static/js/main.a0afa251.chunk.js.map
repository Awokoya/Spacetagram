{"version":3,"sources":["components/Spinner.js","components/LikeButton.js","components/ImageTile.js","components/ImageList.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","className","role","LikeButton","currentLike","onClickFunc","onClick","icon","size","color","Tile","display","url","description","title","date","addtoLiked","id","isLiked","useState","like","setLike","console","log","includes","src","alt","width","height","controls","style","maxWidth","ImageList","image","map","data","i","explanation","App","props","state","images","isloaded","startDate","Date","newdate","getDate","yyyy","getFullYear","mm","getMonth","fetch","process","then","response","json","setState","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAUeA,EATC,WACd,OACE,sBAAKC,UAAW,6BAAhB,uBAEE,qBAAKA,UAAU,iBAAiBC,KAAK,e,iBCc5BC,EAfI,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAGhC,OACE,yBACAC,QAAWD,EACXJ,UAAU,uBAFV,UAIE,cAAC,IAAD,CAAMM,KAAK,QAAQC,KAAM,GAAIC,MAAQL,EAAc,MAAM,SAJ3D,UAKIA,EAAc,QAAU,YC+BjBM,G,OAxCF,SAAC,GAAgE,IAExEC,EAFUC,EAA6D,EAA7DA,IAAKC,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,GACzD,GAD2E,EAAdC,QACrCC,oBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAsBI,OAhBFL,EAAWC,EADTG,EACa,EAGA,GAGjBE,QAAQC,IAAIX,GAGRD,EAAoB,aAFbC,EAAIY,SAAS,QAAU,UAAY,SAGxC,qBAAKC,IAAKb,EACRc,IAAI,uCAEN,wBAAQD,IAAKb,EAAKe,MAAM,OAAOC,OAAO,OAAOC,UAAQ,IAKrD,sBAAK5B,UAAU,yBACb6B,MAAO,CAAEC,SAAU,SADrB,UAGGpB,EAED,sBAAKV,UAAU,YAAf,UACE,6BAAKa,IACL,oBAAGb,UAAU,YAAb,cAA2BY,KAC3B,oBAAIiB,MAAO,CAAErB,MAAO,QAApB,SAA+BM,IAC/B,cAAC,EAAD,CAAYV,YA/BF,WAClBgB,GAASD,IA8BqChB,YAAagB,YCUhDY,EA7CG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAsBjB,OACE,8BAEAA,EAAMC,KAAI,SAACC,EAAKC,GACd,OACA,cAAC,EAAD,CAEAnB,GAAMmB,EACNxB,IAAOqB,EAAMG,GAAGxB,IAChBC,YAAeoB,EAAMG,GAAGC,YACxBvB,MAASmB,EAAMG,GAAGtB,MAClBC,KAAQkB,EAAMG,GAAGrB,MALVqB,SCoBAE,G,yDA7Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,UAAU,GAJK,E,qDAQnB,WAAqB,IAAD,OAGdC,EAAY,IAAIC,KAChBC,EAAUF,EAAUG,UAAY,GAChCC,EAAOJ,EAAUK,cACjBC,EAAKN,EAAUO,WAAW,EAC9B5B,QAAQC,IAAI,YAAaoB,GACzBQ,MAAM,+CAAD,OAAgDC,2CAAhD,uBAA4FL,EAA5F,YAAoGE,EAApG,YAA0GJ,IAC9GQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAlB,GACJ,EAAKqB,SAAS,CACZf,OAAQN,EACRO,UAAU,S,oBAIhB,WACE,MAA6Be,KAAKjB,MAA1BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SAEZ,OADJpB,QAAQC,IAAIkC,KAAKjB,MAAMC,OAAOJ,aACtBK,EAKA,gCACE,oBAAIzC,UAAW,6BAAf,yBAEA,qBAAKA,UAAY,MAAjB,SACA,cAAC,EAAD,CAAWgC,MAASQ,SARjB,cAAC,EAAD,Q,GA9BCiB,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a0afa251.chunk.js","sourcesContent":["\nconst Spinner = () => {\n  return (\n    <div className= \"text-center text-white m-5\">\n      Loading...\n      <div className=\"spinner-border\" role=\"status\"></div>\n    </div>\n  )\n}\n\nexport default Spinner;","import { Icon} from \"@blueprintjs/core\";\nimport { useState } from \"react\";\n\n\nconst LikeButton = ({currentLike, onClickFunc}) => {\n\n\n  return (\n    <button \n    onClick = {onClickFunc}\n    className=\"btn btn-outline-dark\"\n    >  \n      <Icon icon=\"heart\" size={20} color ={currentLike ? 'red':'gray'}/>\n    {`${currentLike ? \"Liked\" : \"Like\"}`}  \n    </button>\n  )\n}\n\n\nexport default LikeButton;","import LikeButton from \"./LikeButton\"\nimport './imageTile.css'\nimport { useState } from \"react\"\n\nconst Tile = ({ url, description, title, date, addtoLiked, id, isLiked }) => {\n  const [like, setLike] = useState(false);\n  let display;\n  const LikePicture = () => {\n    setLike(!like);\n  }\n  if (like) {\n    addtoLiked(id, 1);\n  }\n  else {\n    addtoLiked(id, 0);\n  }\n\n  console.log(url)\n  let type = url.includes('.jpg') ? 'picture' : 'video'\n\n      display = (type === 'picture') ? (\n        <img src={url}\n          alt='APOD: Astronomy Picture of the Day' />\n      ) :\n        <iframe src={url} width=\"auto\" height=\"auto\" controls>\n        </iframe>\n\n      return (\n\n        <div className=\"card bg-light p-5 mb-5\"\n          style={{ maxWidth: \"50rem\" }}\n        >\n          {display}\n\n          <div className=\"card-body\">\n            <h1>{title}</h1>\n            <p className=\"card-text\"> {description}</p>\n            <h6 style={{ color: \"gray\" }}>{date}</h6>\n            <LikeButton onClickFunc={LikePicture} currentLike={like} />\n          </div>\n        </div>\n      )\n  }\n\nexport default Tile;\n","import Tile from \"./ImageTile\";\nimport { useState, useEffect } from \"react\";\n\nconst ImageList = ({ image }) => {\n    // const [likes, addLikes] = useState((localStorage.getItem('likedArray') !== null)?\n    // localStorage.getItem('likedArray').split(\" \"):'');\n    // let likedArray = likes;\n    // const setLikes = (id, type) => {\n    //   console.log('here', type)\n    //   if (type === 1) {\n    //     // addLikes(prev => [...prev, id]);\n    //   }\n    //   else {\n    //     likedArray = likes;\n    //     let index =likedArray.indexOf(id)\n    //     likedArray.splice(index, 1)\n    //     // addLikes([...likedArray]);\n    //   }\n    // }\n\n    // useEffect(() => {\n    //   console.log('useeff called', likes)\n    //       localStorage.setItem('likedArray', likes.toString())\n    // }, [likes, addLikes])\n\n    return(\n      <div>\n      {\n      image.map((data,i)  => {\n        return (\n        <Tile\n        key = {i}\n        id = {i}\n        url = {image[i].url}\n        description = {image[i].explanation}\n        title = {image[i].title}\n        date = {image[i].date} \n        // addtoLiked = {setLikes}\n        // isliked= {likes.includes(i) ? true : false}\n        />\n        )\n    })\n  }\n  </div>\n    )\n}\n\n\nexport default ImageList;\n","import { Component } from 'react';\nimport Spinner from './components/Spinner';\nimport ImageList from './components/ImageList';\nimport \"./App.css\"\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: [],\n      isloaded: false\n    }\n  }\n\n  componentDidMount() {\n    //new date \n    //end date \n    let startDate = new Date();\n    let newdate = startDate.getDate() - 15\n    let yyyy = startDate.getFullYear();\n    let mm = startDate.getMonth()+1;\n    console.log(\"rand date\", startDate)\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_API_KEY}&start_date=${yyyy}-${mm}-${newdate}`)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        images: data,\n        isloaded: true})\n      });\n\n  }\n  render (){\n    const { images, isloaded } = this.state;\n    console.log(this.state.images.explanation)\n        if(!isloaded) {\n          return <Spinner/>\n        }\n        else {\n          return (\n            <div >\n              <h1 className =\"text-center text-white p-3\">Spacetagram</h1>\n              {/* <p>Brought by APOD: Astronomy Picture of the Day </p> */}\n              <div className = \"p-2\">\n              <ImageList image = {images}/>\n              </div>\n            </div>\n          )\n        }\n      }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}